if vim.g.colors_name == 'nazgul' then
  return
end

if vim.g.colors_name then
  vim.cmd 'hi clear'
  vim.cmd 'syntax reset'
end

vim.g.colors_name = 'nazgul'

local colors = {
  { 'Normal', { fg = '#c6c6c6', bg = '#141414' } },
  { 'Constant', { fg = '#727272', bold = true } },
  { 'String', { fg = '#aaaaaa' } },
  { 'Number', { fg = '#828282' } },
  { 'NormalFloat', { fg = '#c6c6c6', bg = '#1d1d1d' } },
  { 'FloatBorder', { fg = '#c6c6c6', bg = '#141414' } },
  { 'Identifier', { fg = '#969696' } },
  { 'Function', { fg = '#969696' } },
  { 'Statement', { fg = '#727272', bold = true } },
  { 'Operator', { fg = '#d0d0d0' } },
  { 'Keyword', { fg = '#d0d0d0' } },
  { 'PreProc', { fg = '#8c8c8c' } },
  { 'Type', { fg = '#c6c6c6', bold = true } },
  { 'Special', { fg = '#727272' } },
  { 'SpecialComment', { fg = '#aaaaaa', bold = true } },
  { 'Title', { fg = '#8c8c8c', bold = true } },
  { 'Comment', { fg = '#aaaaaa', italic = true } },
  { 'LineNr', { fg = '#666666', bg = '#141414' } },
  { 'FoldColumn', { fg = '#8c8c8c', bg = '#141414' } },
  { 'CursorLine', { bg = '#282828' } },
  { 'CursorLineNr', { fg = '#d3d3d3', bg = '#282828' } },
  { 'Visual', { fg = '#282828', bg = '#828282' } },
  { 'Search', { fg = '#333333', bg = '#b5b5b5' } },
  { 'IncSearch', { fg = '#282828', bg = '#8c8c8c', bold = true } },
  { 'SpellBad', { fg = '#870000', undercurl = true } },
  { 'SpellCap', { fg = '#870000', undercurl = true } },
  { 'SpellLocal', { fg = '#870000', undercurl = true } },
  { 'SpellRare', { fg = '#875f00', undercurl = true } },
  { 'Error', { fg = '#870000', bold = true } },
  { 'ErrorMsg', { fg = '#870000' } },
  { 'WarningMsg', { fg = '#875f00' } },
  { 'ModeMsg', { fg = '#aaaaaa' } },
  { 'MoreMsg', { fg = '#aaaaaa' } },
  { 'Cursor', { bg = '#bfbfbf' } },
  { 'Underlined', { fg = '#969696', underline = true } },
  { 'SpecialKey', { fg = '#666666' } },
  { 'NonText', { fg = '#666666' } },
  { 'Directory', { fg = '#969696' } },
  { 'Pmenu', { fg = '#aaaaaa', bg = '#222222' } },
  { 'PmenuSbar', { fg = '#282828', bg = '#efefef' } },
  { 'PmenuSel', { fg = '#5b5b5b', bg = '#5b5b5b' } },
  { 'PmenuThumb', { fg = '#5b5b5b', bg = '#a0a0a0' } },
  { 'StatusLine', { fg = '#b5b5b5', bg = '#333333' } },
  { 'StatusLineNC', { fg = '#666666', bg = '#222222' } },
  { 'WildMenu', { fg = '#969696' } },
  { 'VertSplit', { fg = '#5b5b5b', bg = '#5b5b5b' } },
  { 'DiffAdd', { fg = '#141414', bg = '#00875f' } },
  { 'DiffChange', { fg = '#141414', bg = '#005f87' } },
  { 'DiffDelete', { fg = '#141414', bg = '#870000' } },
  { 'DiffText', { fg = '#282828', bg = '#00afff' } },
  { 'DiffAdded', { fg = '#00875f' } },
  { 'DiffChanged', { fg = '#005f87' } },
  { 'DiffRemoved', { fg = '#870000' } },
  { 'Character', { link = 'Constant' } },
  { 'Float', { link = 'Number' } },
  { 'Boolean', { link = 'Number' } },
  { 'SignColumn', { link = 'FoldColumn' } },
  { 'ColorColumn', { link = 'FoldColumn' } },
  { 'CursorColumn', { link = 'CursorLine' } },
  { 'Folded', { link = 'LineNr' } },
  { 'Conceal', { link = 'Normal' } },
  { 'ErrorMsg', { link = 'Error' } },
  { 'Conditional', { link = 'Statement' } },
  { 'Repeat', { link = 'Statement' } },
  { 'Label', { link = 'Statement' } },
  { 'Exception', { link = 'Statement' } },
  { 'Include', { link = 'PreProc' } },
  { 'Define', { link = 'PreProc' } },
  { 'Macro', { link = 'PreProc' } },
  { 'PreCondit', { link = 'PreProc' } },
  { 'StorageClass', { link = 'Type' } },
  { 'Structure', { link = 'Type' } },
  { 'Typedef', { link = 'Type' } },
  { 'SpecialChar', { link = 'Special' } },
  { 'Tag', { link = 'Special' } },
  { 'Delimiter', { link = 'Special' } },
  { 'Debug', { link = 'Special' } },
  { 'Question', { link = 'Special' } },
  { 'VisualNOS', { link = 'Visual' } },
  { 'TabLine', { link = 'StatusLineNC' } },
  { 'TabLineFill', { link = 'StatusLineNC' } },
  { 'TabLineSel', { link = 'StatusLine' } },
  { 'RedSign', { fg = '#cc241d', bg = '#141414' } },
  { 'YellowSign', { fg = '#fabd2f', bg = '#141414' } },
  { 'GreenSign', { fg = '#b8cc26', bg = '#141414' } },
  { 'BlueSign', { fg = '#83a5cb', bg = '#141414' } },
  { 'AquaSign', { fg = '#8ec07c', bg = '#141414' } },
  { 'RedHover', { fg = '#aa241d' } },
  { 'YellowHover', { fg = '#d89b0d' } },
  { 'OrangeHover', { fg = '#fd7d2f' } },
  { 'GreenHover', { fg = '#b8cc26' } },
  { 'BlueHover', { fg = '#83a5cb' } },
  { 'AquaHover', { fg = '#8ec07c' } },
  { 'WhiteHover', { fg = '#ffffff' } },
  { 'Todo', { fg = '#eaeaea', bold = true } },
  { 'MatchParen', { link = 'Todo' } },
  { 'DiffAdded', { link = 'GreenSign' } },
  { 'DiffChanged', { link = 'BlueSign' } },
  { 'DiffRemoved', { link = 'RedSign' } },
  { 'SpellBad', { link = 'RedSign' } },
  { 'Error', { link = 'RedSign' } },
  { 'ErrorMsg', { link = 'RedSign' } },
  { 'YellowFloat', { fg = '#cccc00', bg = '#282828' } },
  { 'CmpItemAbbrDeprecated', { strikethrough = true, fg = '#808080' } },
  { 'CmpItemAbbrMatch', { fg = '#569CD6' } },
  { 'CmpItemAbbrMatchFuzzy', { fg = '#569CD6' } },
  { 'CmpItemKindClass', { fg = '#EE9D28' } },
  { 'CmpItemKindConstructor', { fg = '#B180D7' } },
  { 'CmpItemKindEnum', { fg = '#EE9D28' } },
  { 'CmpItemKindEnumMember', { fg = '#75BEFF' } },
  { 'CmpItemKindEvent', { fg = '#EE9D28' } },
  { 'CmpItemKindField', { fg = '#75BEFF' } },
  { 'CmpItemKindFile', { fg = '#8ec07c' } },
  { 'CmpItemKindFolder', { fg = '#8ec07c' } },
  { 'CmpItemKindFunction', { fg = '#B180D7' } },
  { 'CmpItemKindInterface', { fg = '#75BEFF' } },
  { 'CmpItemKindKeyword', { fg = '#D4D4D4' } },
  { 'CmpItemKindMethod', { fg = '#B180D7' } },
  { 'CmpItemKindModule', { fg = '#fabd2f' } },
  { 'CmpItemKindNamespace', { fg = '#fabd2f' } },
  { 'CmpItemKindOperator', { fg = '#D4D4D4' } },
  { 'CmpItemKindProperty', { fg = '#D4D4D4' } },
  { 'CmpItemKindPackage', { fg = '#fabd2f' } },
  { 'CmpItemKindSnippet', { fg = '#fe8019' } },
  { 'CmpItemKindStruct', { fg = '#EE9D28' } },
  { 'CmpItemKindTypeParameter', { fg = '#870000' } },
  { 'CmpItemKindVariable', { fg = '#75BEFF' } },
  { 'CmpItemMenu', { fg = '#bfbfbf', italic = true } },
  { 'TSParameter', { italic = true, fg = '#969696' } },
  { 'DiagnosticError', { link = 'RedHover' } },
  { 'DiagnosticWarning', { link = 'YellowHover' } },
  { 'DiagnosticInfo', { link = 'WhiteHover' } },
  { 'DiagnosticHint', { link = 'BlueHover' } },
  { 'LspReferenceText', { link = 'Todo' } },
  { 'LspReferenceRead', { link = 'Todo' } },
  { 'LspReferenceWrite', { link = 'Todo' } },
  { 'TSDefinition', { link = 'LspReferenceText' } },
  { 'TSDefinitionUsage', { link = 'LspReferenceWrite' } },
  { 'LspFloatWinBorder', { link = 'IndentBlanklineChar' } },
  { 'DiagnosticUnderlineError', { sp = '#aa241d', underline = true } },
  { 'DiagnosticUnderlineWarn', { sp = '#d89b0d', underline = true } },
  { 'DiagnosticUnderlineInfo', { sp = '#ffffff', underline = true } },
  { 'DiagnosticUnderlineHint', { sp = '#83a5cb', underline = true } },
  { 'DiagnosticUnnecessary', { sp = '#83a5cb', underline = true, strikethrough = true } },
  { 'WinSeparator', { bg = '#141414', fg = '#c6c6c6' } },
  { 'IndentBlanklineContextChar', { fg = '#ffffff' } },
  -- {'IndentBlanklineContextStart', {fg='#ffffff', underline=true}},
  { '@comment', { link = 'Comment' } },
  { '@none', { bg = 'NONE', fg = 'NONE' } },
  { '@preproc', { link = 'PreProc' } },
  { '@define', { link = 'Define' } },
  { '@operator', { link = 'Operator' } },
  { '@punctuation.delimiter', { link = 'Delimiter' } },
  { '@punctuation.bracket', { link = 'Delimiter' } },
  { '@punctuation.special', { link = 'Delimiter' } },
  { '@string', { link = 'String' } },
  { '@string.regex', { link = 'String' } },
  { '@string.escape', { link = 'SpecialChar' } },
  { '@string.special', { link = 'SpecialChar' } },
  { '@character', { link = 'Character' } },
  { '@character.special', { link = 'SpecialChar' } },
  { '@boolean', { link = 'Boolean' } },
  { '@number', { link = 'Number' } },
  { '@float', { link = 'Float' } },
  { '@function', { link = 'Function' } },
  { '@function.call', { link = 'Function' } },
  { '@function.builtin', { link = 'Special' } },
  { '@function.macro', { link = 'Macro' } },
  { '@method', { link = 'Function' } },
  { '@method.call', { link = 'Function' } },
  { '@constructor', { link = 'Special' } },
  { '@parameter', { link = 'Identifier' } },
  { '@keyword', { link = 'Keyword' } },
  { '@keyword.function', { link = 'Keyword' } },
  { '@keyword.return', { link = 'Keyword' } },
  { '@conditional', { link = 'Conditional' } },
  { '@repeat', { link = 'Repeat' } },
  { '@debug', { link = 'Debug' } },
  { '@label', { link = 'Label' } },
  { '@include', { link = 'Include' } },
  { '@exception', { link = 'Exception' } },
  { '@type', { link = 'Type' } },
  { '@type.builtin', { link = 'Type' } },
  { '@type.qualifier', { link = 'Type' } },
  { '@type.definition', { link = 'Typedef' } },
  { '@storageclass', { link = 'StorageClass' } },
  { '@attribute', { link = 'PreProc' } },
  { '@field', { link = 'Identifier' } },
  { '@property', { link = 'Identifier' } },
  { '@variable', { link = 'Identifier' } },
  { '@variable.builtin', { link = 'Special' } },
  { '@constant', { link = 'Constant' } },
  { '@constant.builtin', { link = 'Special' } },
  { '@constant.macro', { link = 'Define' } },
  { '@namespace', { link = 'Include' } },
  { '@symbol', { link = 'Identifier' } },
  { '@text', { link = 'Normal' } },
  { '@text.title', { link = 'Title' } },
  { '@text.literal', { link = 'String' } },
  { '@text.uri', { link = 'Underlined' } },
  { '@text.math', { link = 'Special' } },
  { '@text.environment', { link = 'Macro' } },
  { '@text.environment.name', { link = 'Type' } },
  { '@text.reference', { link = 'Constant' } },
  { '@text.todo', { link = 'Todo' } },
  { '@text.todo.unchecked', { link = 'Todo' } },
  { '@text.todo.checked', { link = 'Done' } },
  { '@text.note', { link = 'SpecialComment' } },
  { '@text.warning', { link = 'WarningMsg' } },
  { '@text.danger', { link = 'ErrorMsg' } },
  { '@text.diff.add', { link = 'diffAdded' } },
  { '@text.diff.delete', { link = 'diffRemoved' } },
  { '@tag', { link = 'Tag' } },
  { '@tag.attribute', { link = 'Identifier' } },
  { '@tag.delimiter', { link = 'Delimiter' } },
  { '@text.strong', { bold = true } },
  { '@text.strike', { strikethrough = true } },
  { '@text.emphasis', { italic = true } },
  { '@text.underline', { underline = true } },
  { '@keyword.operator', { link = 'Operator' } },
}

local n_colors = #colors
local async
local function set_colors()
  local set_hl = vim.api.nvim_set_hl
  for i = 1, n_colors do
    set_hl(0, colors[i][1], colors[i][2])
  end

  async:close()
end

async = vim.loop.new_async(vim.schedule_wrap(set_colors))
